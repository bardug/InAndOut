<?xml version="1.0" encoding="UTF-8"?>
<project name="inandout" default="all">


    <property file="inandout.properties"/>
    <!-- Uncomment the following property if no tests compilation is needed -->
    <!--
    <property name="skip.tests" value="true"/>
     -->

    <!-- Compiler options -->

    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.args" value=""/>
    <property name="compiler.max.memory" value="128m"/>
    <patternset id="ignored.files">
        <exclude name="**/CVS/**"/>
        <exclude name="**/SCCS/**"/>
        <exclude name="**/RCS/**"/>
        <exclude name="**/rcs/**"/>
        <exclude name="**/.DS_Store/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/.pyc/**"/>
        <exclude name="**/.pyo/**"/>
        <exclude name="**/*.pyc/**"/>
        <exclude name="**/*.pyo/**"/>
        <exclude name="**/.git/**"/>
        <exclude name="**/*.hprof/**"/>
        <exclude name="**/_svn/**"/>
        <exclude name="**/.hg/**"/>
        <exclude name="**/*.lib/**"/>
        <exclude name="**/*~/**"/>
        <exclude name="**/__pycache__/**"/>
        <exclude name="**/.bundle/**"/>
        <exclude name="**/*.rbc/**"/>
    </patternset>
    <patternset id="library.patterns">
        <include name="*.zip"/>
        <include name="*.apk"/>
        <include name="*.war"/>
        <include name="*.egg"/>
        <include name="*.ear"/>
        <include name="*.ane"/>
        <include name="*.swc"/>
        <include name="*.jar"/>
    </patternset>
    <patternset id="compiler.resources">
        <exclude name="**/?*.java"/>
        <exclude name="**/?*.form"/>
        <exclude name="**/?*.class"/>
        <exclude name="**/?*.groovy"/>
        <exclude name="**/?*.scala"/>
        <exclude name="**/?*.flex"/>
        <exclude name="**/?*.kt"/>
        <exclude name="**/?*.clj"/>
    </patternset>

    <!-- JDK definitions -->

    <property name="jdk.bin.1.7" value="${jdk.home.1.7}/bin"/>

    <path id="jdk.classpath.1.7">
        <fileset dir="${jdk.home.1.7}">
            <include name="jre/lib/charsets.jar"/>
            <include name="jre/lib/deploy.jar"/>
            <include name="jre/lib/javaws.jar"/>
            <include name="jre/lib/jce.jar"/>
            <include name="jre/lib/jfr.jar"/>
            <include name="jre/lib/jfxrt.jar"/>
            <include name="jre/lib/jsse.jar"/>
            <include name="jre/lib/management-agent.jar"/>
            <include name="jre/lib/plugin.jar"/>
            <include name="jre/lib/resources.jar"/>
            <include name="jre/lib/rt.jar"/>
            <include name="jre/lib/ext/access-bridge-64.jar"/>
            <include name="jre/lib/ext/dnsns.jar"/>
            <include name="jre/lib/ext/jaccess.jar"/>
            <include name="jre/lib/ext/localedata.jar"/>
            <include name="jre/lib/ext/sunec.jar"/>
            <include name="jre/lib/ext/sunjce_provider.jar"/>
            <include name="jre/lib/ext/sunmscapi.jar"/>
            <include name="jre/lib/ext/zipfs.jar"/>
        </fileset>
    </path>

    <property name="project.jdk.home" value="${jdk.home.1.7}"/>
    <property name="project.jdk.bin" value="${jdk.bin.1.7}"/>
    <property name="project.jdk.classpath" value="jdk.classpath.1.7"/>


    <!-- Project Libraries -->

    <path id="library.junit-4.10.classpath">
        <pathelement location="${basedir}/lib/junit-4.10.jar"/>
    </path>
    <path id="library.logging.classpath">
        <pathelement location="${basedir}/lib/slf4j-api-1.7.5.jar"/>
        <pathelement location="${basedir}/lib/slf4j-log4j12-1.7.5.jar"/>
        <pathelement location="${basedir}/lib/log4j-1.2.14.jar"/>
    </path>

    <!-- Modules -->


    <!-- Module InAndOut -->

    <dirname property="module.inandout.basedir" file="${ant.file}"/>


    <property name="module.jdk.home.inandout" value="${project.jdk.home}"/>
    <property name="module.jdk.bin.inandout" value="${project.jdk.bin}"/>
    <property name="module.jdk.classpath.inandout" value="${project.jdk.classpath}"/>

    <property name="compiler.args.inandout" value="${compiler.args}"/>

    <property name="inandout.output.dir" value="${module.inandout.basedir}/out/production/InAndOut"/>
    <property name="inandout.testoutput.dir" value="${module.inandout.basedir}/out/test/InAndOut"/>

    <path id="inandout.module.bootclasspath">
        <!-- Paths to be included in compilation bootclasspath -->
    </path>

    <path id="inandout.module.production.classpath">
        <path refid="${module.jdk.classpath.inandout}"/>
        <path refid="library.junit-4.10.classpath"/>
        <path refid="library.logging.classpath"/>
    </path>

    <path id="inandout.runtime.production.module.classpath">
        <pathelement location="${inandout.output.dir}"/>
        <path refid="library.junit-4.10.classpath"/>
        <path refid="library.logging.classpath"/>
    </path>

    <path id="inandout.module.classpath">
        <path refid="${module.jdk.classpath.inandout}"/>
        <pathelement location="${inandout.output.dir}"/>
        <path refid="library.junit-4.10.classpath"/>
        <path refid="library.logging.classpath"/>
    </path>

    <path id="inandout.runtime.module.classpath">
        <pathelement location="${inandout.testoutput.dir}"/>
        <pathelement location="${inandout.output.dir}"/>
        <path refid="library.junit-4.10.classpath"/>
        <path refid="library.logging.classpath"/>
    </path>


    <patternset id="excluded.from.module.inandout">
        <patternset refid="ignored.files"/>
    </patternset>

    <patternset id="excluded.from.compilation.inandout">
        <patternset refid="excluded.from.module.inandout"/>
    </patternset>

    <path id="inandout.module.sourcepath">
        <dirset dir="${module.inandout.basedir}">
            <include name="src"/>
        </dirset>
    </path>

    <path id="inandout.module.test.sourcepath">
        <dirset dir="${module.inandout.basedir}">
            <include name="test"/>
        </dirset>
    </path>


    <target name="compile.module.inandout" depends="compile.module.inandout.production,compile.module.inandout.tests" description="Compile module InAndOut"/>

    <target name="compile.module.inandout.production" description="Compile module InAndOut; production classes">
        <mkdir dir="${inandout.output.dir}"/>
        <javac includeantruntime="false" destdir="${inandout.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.inandout}/javac">
            <compilerarg line="${compiler.args.inandout}"/>
            <bootclasspath refid="inandout.module.bootclasspath"/>
            <classpath refid="inandout.module.production.classpath"/>
            <src refid="inandout.module.sourcepath"/>
            <patternset refid="excluded.from.compilation.inandout"/>
        </javac>

        <copy todir="${inandout.output.dir}">
            <fileset dir="${module.inandout.basedir}/src">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.module.inandout.tests" depends="compile.module.inandout.production" description="compile module InAndOut; test classes" unless="skip.tests">
        <mkdir dir="${inandout.testoutput.dir}"/>
        <javac destdir="${inandout.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.inandout}/javac">
            <compilerarg line="${compiler.args.inandout}"/>
            <bootclasspath refid="inandout.module.bootclasspath"/>
            <classpath refid="inandout.module.classpath"/>
            <src refid="inandout.module.test.sourcepath"/>
            <patternset refid="excluded.from.compilation.inandout"/>
        </javac>

        <copy todir="${inandout.testoutput.dir}">
            <fileset dir="${module.inandout.basedir}/test">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="clean.module.inandout" description="cleanup module">
        <delete dir="${inandout.output.dir}"/>
        <delete dir="${inandout.testoutput.dir}"/>
    </target>

    <target name="init" description="Build initialization">
        <!-- Perform any build initialization in this target -->
    </target>

    <target name="clean" depends="clean.module.inandout" description="cleanup all"/>

    <target name="build.modules" depends="init, clean, compile.module.inandout" description="build all modules"/>

    <target name="init.artifacts">
        <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
        <property name="artifact.output.inandout:jar" value="${basedir}/out/artifacts/InAndOut_jar"/>
        <property name="artifact.output.inandout:exe" value="${basedir}/out/artifacts/InAndOut_exe"/>
        <mkdir dir="${artifacts.temp.dir}"/>
        <property name="temp.jar.path.InAndOut.jar" value="${artifacts.temp.dir}/InAndOut.jar"/>
    </target>

    <target name="artifact.inandout:jar" depends="compile.module.inandout" description="Build &#39;InAndOut:jar&#39; artifact">
        <mkdir dir="${artifact.output.inandout:jar}"/>
        <property name="artifact.temp.output.inandout:jar" value="${artifacts.temp.dir}/InAndOut_jar"/>
        <mkdir dir="${artifact.temp.output.inandout:jar}"/>
        <jar destfile="${temp.jar.path.InAndOut.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain" >
            <zipfileset dir="${inandout.output.dir}"/>
        </jar>
        <copy file="${temp.jar.path.InAndOut.jar}" tofile="${artifact.temp.output.inandout:jar}/InAndOut.jar"/>
        <copy todir="${artifact.output.inandout:jar}">
            <fileset dir="${artifact.temp.output.inandout:jar}"/>
        </copy>
    </target>

    <target name="build.all.artifacts" depends="init.artifacts, artifact.inandout:jar, artifact.inandout:exe" description="Build all artifacts">
        <!--&lt;!&ndash; Delete temporary files &ndash;&gt;-->
        <delete dir="${artifacts.temp.dir}"/>
    </target>

    <!-- launch4j task -->
    <property name="launch4j.dir" location="${l4j.home}" />

    <taskdef name="launch4j"
             classname="net.sf.launch4j.ant.Launch4jTask"
             classpath="${l4j.home}:${l4j.home}/launch4j.jar:${l4j.home}/lib/xstream.jar" />


    <target name="artifact.inandout:exe">
        <mkdir dir="${artifact.output.inandout:exe}"/>
        <launch4j configFile="./launch4j_config.xml" />
<!--
        <launch4j>
            <config headerType="gui" outfile="${artifact.output.inandout:exe}/InAndOut.exe"
                    dontWrapJar="false" jarPath="${basedir}/out/artifacts/InAndOut_jar/InAndOut.jar" >
                &lt;!&ndash;<var>SETTINGS="%HomeDrive%%HomePath%\\settings.ini"</var>&ndash;&gt;
                <icon>%USERPROFILE%\Dropbox\Java_Projects\InAndOut\src\res\clock_16.png</icon>
                <classPath mainClass="com.berdugo.timeclock.main.InAndOutMain">
                    <cp>%USERPROFILE%\Dropbox\Java_Projects\InAndOut\lib\*.jar</cp>
                </classPath>
                <jre minVersion="1.4.0">
                    &lt;!&ndash;<opt>-Dlaunch4j.exedir="${l4j.home}"</opt>&ndash;&gt;
                    &lt;!&ndash;<opt>-Dlaunch4j.exefile="${l4j.home}"</opt>&ndash;&gt;
                </jre>
            </config>
        </launch4j>
-->
    </target>

    <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>